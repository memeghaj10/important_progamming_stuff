class Solution {
public:
    
    int paren(int node,vector<int>& parent) {
        
        if(parent[node]==node) {
            return node;
        }
        
        return parent[node]=paren(parent[node],parent);
        
    }
    
    void unions(int a,int b,vector<int>& rank,vector<int>& parent) {
        
        a=paren(a,parent);
        b=paren(b,parent);
        
        if(rank[a]>rank[b]) {
            parent[b]=a;
            rank[a]+=rank[b];
        }
        
        else {
            parent[a]=b;
            rank[b]+=rank[a];
        }
        
    }
    
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
                
        int n=edges.size();
        
        vector<int> parent(n+1,0);
        vector<int> rank(n+1,0);
        
        for(int i=0;i<n+1;i++) {
            parent[i]=i;
        }
        
        for(int i=0;i<n;i++) {
            
            int a=edges[i][0];
            int b=edges[i][1];
            
            if(paren(a,parent)==paren(b,parent)) {
                return edges[i];
            }
            
            else {
                unions(a,b,rank,parent);
            }
        }
        
        vector<int> r;
        
        return r;
        
    }
};