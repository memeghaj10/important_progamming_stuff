class Solution {
public:
    
    bool subseq(string a,string b) {
        
        int n=a.size();
        int m=b.size();
        
        int i=0;
        int j=0;
        
        while(i<n&&j<m) {
            if(a[i]==b[j]) {
                i++;
                j++;
            }
            
            else {
                i++;
            }
            
           
        }
        
        if(j==m) {
            return 1;
        }
        
        return 0;
        
    }
    
    
    int numMatchingSubseq(string s, vector<string>& words) {
        
        int n=s.size();
        
        int ans=0;
        
        int m=words.size();
        
        set<string> st;
        set<string> reject;
        
        for(int i=0;i<m;i++) {
            
            if(reject.find(words[i])!=reject.end()) {
                //cout<<1;
                continue;
            }
            if(st.find(words[i])!=st.end()) {
               // cout<<2;
                ans++;
                continue;
            }
            if(subseq(s,words[i])) {
                st.insert(words[i]);
                ans++;
                //cout<<3;
                continue;
            }
            //cout<<4;
            reject.insert(words[i]);
        }
        
        return ans;
        
    }
};